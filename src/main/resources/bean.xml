<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean id="accountService" class="com.kind1ess.service.impl.AccountServiceImpl"></bean>
<!--    spring中基于xml的aop
        1.把通知bean也配进来
        2.使用aop:config标签表明开始AOP配置
        3.使用aop:aspect标签表明开始配置切面
            id属性：是给切面提供一个唯一标识
            ref属性：指定通知类的bean的id
        4.在aop:aspect标签内部的使用对应标签来配置通知类型
            aop:before：表示前置通知
                method属性：用于指定Logger类中哪个方法是前置通知
                pointcut属性：用于指定切入点表达式，该表达式的含义是对业务层中哪些方法进行增强
            切入点表达式写法：
                关键字：execution(表达式)
                标准表达式：
                    访问修饰符 返回值类型 全类名（参数）
                全通配表达式：
                    * *..*.*(..)
                原理：
                    访问修饰符可以省略
                    返回值类型可以使用通配符表示任意类型
                    包名可以用通配符表示任意包，但是有几级包就要用几个*.
                    包名可以使用..表示当前包及其子包
                    类名和方法名都可以使用通配符
                    参数列表：
                        可以直接写数据类型：
                                基本类型直接写名称
                                引用类型写全类名
                        可以使用通配符表示任意类型，但是必须有参数
                        可以使用..表示有无参数均可，有参数表示任意参数

                        实际开发中切入点的表达式的通常写法：
                            切到业务层实现类下的所有方法：
                                * com.kind1ess.service.impl.*.*(..)
-->
    <bean id="logger" class="com.kind1ess.utils.Logger"></bean>

    <aop:config>
        <aop:aspect id="logAdvice" ref="logger">
            <aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>

</beans>